import random #Так как выбираем слово из банка слов случайным образом, импортируем рандом
a, b, setups, fl = ["геометрия", "чевиана", "теорема"], " ", [0, 0], 0
ea = ["america", "cheese", "python"]
wr, tr = [a, ea], 1
start = """Программа Поле Чудес приветствует вас! Вы должны угадать слово
за как можно меньшее количество попыток: для этого либо угадывайте буквы слова,
либо пытайтесь угадать слово, вводя его полностью (ввод нечувствителен к регистру).
Вы можете пользоваться командами, их полный перечень: /cl - сменить язык
угадываемых слов с русского на английский либо наоборот, /cm - сменить
визуализацию с упрощенной на продвинутую и наоборот (вывод крупных букв пока работает
только дляанглийских слов), /helpme поможет вывестиданный текст еще раз, /used выводит
все уникальные буквы, которые вы угадали в текущем слове через запятую и пробел,
/rest выводит все неиспользованныебуквы того алфавита, словом которого является
угадываемое слово. Команды можно вводить в любом вводе."""
print(start)#Выводим первый раз инструкцию
congr = r"""
                                 .''.
       .''.             *''*    :_\/_:     . 
      :_\/_:   .    .:.*_\/_*   : /\ :  .'.:.'.
  .''.: /\ : _\(/_  ':'* /\ *  : '..'.  -=:o:=-
 :_\/_:'.:::. /)\*''*  .|.* '.\'/.'_\(/_'.':'.'
 : /\ : :::::  '*_\/_* | |  -= o =- /)\    '  *
  '..'  ':::'   * /\ * |'|  .'/.\'.  '._____
      *        __*..* |  |     :      |.   |' .---"|
       _*   .-'   '-. |  |     .--'|  ||   | _|    |
    .-'|  _.|  |    ||   '-__  |   |  |    ||      |
    |' | |.    |    ||       | |   |  |    ||      |
 ___|  '-'     '    ""       '-'   '-.'    '`      |____
"""
#Псевдографическая картинка с поздравлением (выводится
#при угадывании слова в продвинутом режиме визуализации)
visual =  [
r"          $$\                       $$\            $$$$$$\            $$\       $$\          $$\       $$\                                                                             $$\                                                                      ",  
r"          $$ |                      $$ |          $$  __$$\           $$ |      \__|         $$ |      $$ |                                                                            $$ |                                                                     ",
r" $$$$$$\  $$$$$$$\   $$$$$$$\  $$$$$$$ | $$$$$$\  $$ /  \__| $$$$$$\  $$$$$$$\  $$\      $$\ $$ |  $$\ $$ |$$$$$$\$$$$\  $$$$$$$\   $$$$$$\   $$$$$$\   $$$$$$\   $$$$$$\   $$$$$$$\ $$$$$$\   $$\   $$\ $$\    $$\ $$\  $$\  $$\ $$\   $$\ $$\   $$\ $$$$$$$$\ ",
r" \____$$\ $$  __$$\ $$  _____|$$  __$$ |$$  __$$\ $$$$\     $$  __$$\ $$  __$$\ $$ |     \__|$$ | $$  |$$ |$$  _$$  _$$\ $$  __$$\ $$  __$$\ $$  __$$\ $$  __$$\ $$  __$$\ $$  _____|\_$$  _|  $$ |  $$ |\$$\  $$  |$$ | $$ | $$ |\$$\ $$  |$$ |  $$ |\____$$  |",
r" $$$$$$$ |$$ |  $$ |$$ /      $$ /  $$ |$$$$$$$$ |$$  _|    $$ /  $$ |$$ |  $$ |$$ |     $$\ $$$$$$  / $$ |$$ / $$ / $$ |$$ |  $$ |$$ /  $$ |$$ /  $$ |$$ /  $$ |$$ |  \__|\$$$$$$\    $$ |    $$ |  $$ | \$$\$$  / $$ | $$ | $$ | \$$$$  / $$ |  $$ |  $$$$ _/ ",
r"$$  __$$ |$$ |  $$ |$$ |      $$ |  $$ |$$   ____|$$ |      $$ |  $$ |$$ |  $$ |$$ |     $$ |$$  _$$<  $$ |$$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |       \____$$\   $$ |$$\ $$ |  $$ |  \$$$  /  $$ | $$ | $$ | $$  $$<  $$ |  $$ | $$  _/   ",
r"\$$$$$$$ |$$$$$$$  |\$$$$$$$\ \$$$$$$$ |\$$$$$$$\ $$ |      \$$$$$$$ |$$ |  $$ |$$ |     $$ |$$ | \$$\ $$ |$$ | $$ | $$ |$$ |  $$ |\$$$$$$  |$$$$$$$  |\$$$$$$$ |$$ |      $$$$$$$  |  \$$$$  |\$$$$$$  |   \$  /   \$$$$$\$$$$  |$$  /\$$\ \$$$$$$$ |$$$$$$$$\ ", 
r" \_______|\_______/  \_______| \_______| \_______|\__|       \____$$ |\__|  \__|\__|     $$ |\__|  \__|\__|\__| \__| \__|\__|  \__| \______/ $$  ____/  \____$$ |\__|      \_______/    \____/  \______/     \_/     \_____\____/ \__/  \__| \____$$ |\________|",
r"                                                            $$\   $$ |                  $$  |                                                $$ |            $$ |                                                                           $$\   $$ |          ",
r"                                                            \$$$$$$  |              $$$$$$  |                                                $$ |            $$ |                                                                           \$$$$$$  |          ", 
r"                                                             \______/               \______/                                                 \__|            \__|                                                                            \______/           "
]
#Большие объемные текстовые буквы. Из них составляется
#английское слово в продвинутом режиме визуализации.
_ = [
r"          ",       
r"          ",
r"          ",
r"          ",
r"          ",
r"          ",
r"          ",
r"          ",
r"          ",
r"          ",
r"__________",
#Нижнее подчеркивание, используемое в продвинутом
#режиме визуализации, определяется отдельно.
]
borders1 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 84, 93, 103, 107, 121, 131, 141, 151, 161, 171, 181, 191, 201, 212, 226, 236, 246, 256]
#Т.к объемные буквы хранятся в строке, мы должны указать границы каждой буквы
def cm():
    setups[0] = not setups[0]
    if setups[0] == 0:
        print("Выбран стандартный режим визуализации.")
    else:
        print("Выбран более продвинутый режим визуализации.")
def used():
    print(", ".join(sorted([i for i in set(s2) if i != "_"])))
def rest():
    if setups[1] == 1:
        print(", ".join(sorted(list(set([chr(i) for i in range(97, 123)]) - set([i for i in s2 if i != "_"])))))
    else:
        print(", ".join(sorted(list(set([chr(i) for i in range(1072, 1104)]) - set([i for i in s2 if i != "_"])))))
def helpme():
    print(start)
def cl():
    if len(wr[not setups[1]]) == 0:
        if setups[1] == 1:
           print("Банк русских слов пуст.")
        else:
           print("Банк английских слов пуст.")
    else:
        setups[1] = not setups[1]
        if setups[1] == 0:
            print("Выбран банк русских слов.")
        else:
            print("Выбран банк английских слов.")
links, func = ["cm", "used", "rest", "cl", "helpme"], [cm, used, rest, cl, helpme]
while b.lower() != "сдаться" and not(len(a) == 0 and len(ea) == 0):
    tr = 1
    if len(a) == 0 and fl == 0:
        print("Автосмена на английский банк слов (все слова из русского банка слов были использованы.)")
        setups[1] = not setups[1]
        m = wr[1]
        fl = 1
    elif len(ea) == 0 and fl == 0:
        print("Автосмена на русский банк слов (все слова из английского банка слов был израсходованы).")
        setups[1] = not setups[1]   
        m = wr[0]
        fl = 1
    else:
        m = wr[setups[1]]
    if b.lower() != "/cm":
        ind = random.randint(0, len(m) - 1)
        s1 = m[ind]
        s2 = list("_" * len(s1))
    b = ""
    while not(str(s1).lower() == "".join(s2) or b.lower() == "".join(s1)):
        if b in ["/cm", "/cl"]:
            break
        if len(set(s2)) == 1 and s2[0] == "_":
            print(*s2, sep=" ")
        b = input("Попробуйте угадать букву слова либо же все слово без учета регистра.\n").replace("ё", "е")
        tr += 1
        while not((len(b) != 1 and b.lower() == "".join(s1)) or (len(b) == 1 and b.lower() in s1 and b.lower() not in s2)):
            if b != "":
                if len(b) != 1:
                    if b[0] != "/":
                        print("Введите букву или же попытайтесь угадать слово.")
                    else:
                        if b[1:].lower() in links:
                            func[links.index(b[1:].lower())]()
                            if b.lower() in ["/cm", "/cl"]:
                                break
                        else:
                            print("Такой функции нет.")
                elif len(b) == 1:
                    if b.lower() in s2 and b.lower() != "_":
                        print("Буква уже угадана Вами.")
                    elif b.lower() not in s1:
                        print("Такой буквы нет в слове.")
            else:
                print("Введена пустая строка.")
            b = input("Попробуйте угадать букву слова либо же все слово без учета регистра.\n").replace("ё", "е")
            tr += 1
        if b not in ["/cm", "/cl"]:
            if b.lower() != "".join(s1):
                for i in range(len(s1)):
                    if s1[i] == b.lower():
                        s2[i] = b.lower()
                    if setups[0] == 0:
                        if i != len(s1) - 1:
                            print(s2[i], end=" ")
                        else:
                            print(s2[i])
                    if setups[0] == 1 and setups[1] == 1:
                        for i in visual:
                            for j in s2:
                                if j != "_":
                                    print(i[(borders1[ord(j) - 97]):(borders1[ord(j) - 96])], end="  ")
                                else:
                                    print(_[visual.index(i)], end=" ")
                            print()
            if len(b) == 1:
                print(f'Букв{"а" * (s1.count(b.lower()) == 1) + "ы" * (s1.count(b.lower()) > 1)} \
угадан{"а" * (s1.count(b.lower()) == 1) + "ы" * (s1.count(b.lower()) > 1)}!')
                if str(s1).lower() == "".join(s2):
                    print("Слово угадано!")
                    print('Количество попыток: ' + str(tr - 1))
                    if setups[0] == 1:
                        print(congr)
                    if (tr - 1) == len(set(s1)):
                        print("Минимальное количество попыток!")
                    del m[ind]
            else:
                print("Слово угадано с попытки " + str(tr - 1) + "! Поздравляю!")
                if setups[0] == 1:
                    print(congr)
                del m[ind]
print("Банки слов израсходованы!")
